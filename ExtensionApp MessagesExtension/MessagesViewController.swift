//
//  MessagesViewController.swift
//  ExtensionApp MessagesExtension
//
//  Created by Felix on 14.01.2022.
//

import UIKit
import Messages
import KeychainSwift

class MessagesViewController: MSMessagesAppViewController {
    
    let nameLabel: UILabel = {
       let label = UILabel()
        label.text = "Name: N/A"
        return label
    }()
    
    lazy var getFromKeychainButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Get", for: .normal)
        button.setTitleColor(.white, for: .normal)
        button.titleLabel?.font = UIFont.boldSystemFont(ofSize: 16)
        button.backgroundColor = .red
        button.layer.cornerRadius = 8
        button.layer.masksToBounds = true
        button.addTarget(self, action: #selector(getFromKeychanTapped), for: .touchUpInside)
        return button
    }()
    
    @objc
    private func getFromKeychanTapped() {
        let name = SharedKeychainSwift.get(key: "name")
        nameLabel.text = "Name: \(name) "
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        let keychain = KeychainSwift()
        let accessGroup = "RF9T8S9829.com.mobiledevelopment.rss " // added prefix for group
        //let appIdPrefix = Bundle.main.object(forInfoDictionaryKey: "AppIdentifierPrefix")
        // group.RF9T8S9829.com.mobiledevelopment.rss
        SharedKeychainSwift.start(withKeychain: keychain, accessGroup: accessGroup)
        
        setupView()
    }
    
  
    private func setupView() {
        view.backgroundColor = .white
        view.addSubview(nameLabel)
        view.addSubview(getFromKeychainButton)
        
        NSLayoutConstraint.activate([
            nameLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 48),
            nameLabel.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            nameLabel.widthAnchor.constraint(equalToConstant: 50),
//            nameLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor),
//            nameLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            
           // getFromKeychainButton.widthAnchor.constraint(equalToConstant: 50),
            getFromKeychainButton.heightAnchor.constraint(equalToConstant: 50),
            getFromKeychainButton.topAnchor.constraint(equalTo: nameLabel.bottomAnchor),
            getFromKeychainButton.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            getFromKeychainButton.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor, constant: 16),
            getFromKeychainButton.rightAnchor.constraint(equalTo: view.safeAreaLayoutGuide.rightAnchor, constant: -16)
        ])
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
